# -*- coding: utf-8 -*-
"""yolov4-deepsort_V1.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BoYA8AttpkAHV2DKcvMh21OvcH7XJo0L

**런타임 유형 GPU로 변경하기**

## **yolov4-deepsort github 불러오기**
"""

# clone repository for deepsort with yolov4
!git clone https://github.com/theAIGuysCode/yolov4-deepsort

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov4-deepsort

"""# **tensorflow version 재설치**"""

import tensorflow as tf
tf .__version__

!pip uninstall tensorflow

!pip install tensorflow===2.3.0

"""**위 코드까지 실행하고 런타임 재시작**"""

import tensorflow as tf
tf .__version__

#종속성 문제 발생 시 아래 코드 실행 -> tensorflow 버전 문제
#%cd /content/yolov4-deepsort/
#!pip install -r requirements-gpu.txt

"""# **Get YOLOv4 Pre-trained Weights** 

local computer에서 학습시킨 weights 불러오기
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov4-deepsort/data
!unzip /content/drive/MyDrive/weights/yolov4.zip

"""# **학습 결과 적용**

### coco.names에서 클래스명 아래와 같이 수정 


B
S
blueball
bucket
redball
block
knife
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov4-deepsort

"""## **Convert YOLOv4 Darknet Weights to TensorFlow model**"""

#Darknet 가중치를 tensorflow 모델로 변환
!python save_model.py --model yolov4
#!python save_model.py --weights ./data/yolov4.weights --output ./checkpoints/yolov4-416 --input_size 416 --model yolov4

"""### **gbc_ball.mp4 업로드**

다음 경로(/content/yolov4-deepsort/data/video/gbc_ball)에 업로드**

  
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov4-deepsort/data/video
!unzip /content/drive/MyDrive/weights/gbc_ball.zip

"""**object_tracker.py에서 allowed_class 수정하기**"""

!pip install numpy --upgrade

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov4-deepsort
#!unzip /content/drive/MyDrive/weights/object_tracker_v9.zip

"""## Running DeepSort with YOLOv4

colab에서는 object tracking을 하는 동안 영상 재생을 지원하지 않기 때문에, tracking 을 하는 동안 --dont_show를 이용해 영상 출력을 제한하고, 
tracking이 완료되면 추가 코드를 통해서 추적 결과를 영상으로 확인하도록 한다.
"""

# YOLOv4를 기반으로 한 DeepSort 실행하기
# --info를 이용하면 추적 객체들에 대한 정보를 볼 수 있다.
!python object_tracker.py --video data/video/gbc_ball.mp4 --output ./outputs/tracker.avi --model yolov4 --dont_show --count

# 영상 재생을 위한 함수 선언
import io 
from IPython.display import HTML
from base64 import b64encode
def show_video(file_name, width=640):
  # show resulting deepsort video
  mp4 = open(file_name,'rb').read()
  data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
  return HTML("""
  <video width="{0}" controls>
        <source src="{1}" type="video/mp4">
  </video>
  """.format(width, data_url))

# Commented out IPython magic to ensure Python compatibility.
# 결과영상 (.avi 확장자)을 .mp4 확장자로 변환하여 재생
import os
path_video = os.path.join("outputs","tracker.avi")
# %cd outputs/
!ffmpeg -y -loglevel panic -i tracker.avi output.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("outputs","output.mp4")
show_video(path_output, width=960)

"""Reference 

1. https://github.com/theAIGuysCode/yolov4-deepsort
2. https://colab.research.google.com/drive/1zmeSTP3J5zu2d5fHgsQC06DyYEYJFXq1?usp=sharing
3. https://minding-deep-learning.tistory.com/6
4. https://www.roseindia.net/tensorflow/tensorflow2/install-tensorflow-2.3.0-google-colab.shtml
"""